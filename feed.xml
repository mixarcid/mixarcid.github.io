<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://michael.brocidiacono.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://michael.brocidiacono.com/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-07-03T20:36:11+00:00</updated><id>https://michael.brocidiacono.com/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">JAXifying PyTorch</title><link href="https://michael.brocidiacono.com/blog/2023/jorch/" rel="alternate" type="text/html" title="JAXifying PyTorch"/><published>2023-07-03T13:48:35+00:00</published><updated>2023-07-03T13:48:35+00:00</updated><id>https://michael.brocidiacono.com/blog/2023/jorch</id><content type="html" xml:base="https://michael.brocidiacono.com/blog/2023/jorch/"><![CDATA[<p>I was recently in a situation where I wanted some PyTorch code to run a lot faster. Specifically, I had a function (let’s call it <code class="language-plaintext highlighter-rouge">f</code>) that I wanted to optimize. I was using torch’s autograd to determine the gradient of this function, and optimizing over some parameters with the BFGS optimizer (using SciPy’s <code class="language-plaintext highlighter-rouge">minimize</code>). This was all working fine – but it was super slow. The function was relatively simple, so autograd introduced a lot of overhead. What do I do?</p> <p>Well, nowadays the correct thing to do is use the new <code class="language-plaintext highlighter-rouge">torch.compile</code>. In fact, it was the correct thing to do when I initially had this problem – it was around in the pre-release, just new and buggy. I should have done my darnedest to modify my code until torch compilation worked. I’m sure with some simplifications I could have got it working.</p> <p>Unfortunately, this is not what I did. And now I’m paying for it.</p> <p>It is well known that JAX is super fast – can I just rewrite the function to use JAX primitives? Use <code class="language-plaintext highlighter-rouge">jax.grad</code> and <code class="language-plaintext highlighter-rouge">jax.compile</code>, and bang! It should work wonderfully. Alas, this was not an option – I was using <code class="language-plaintext highlighter-rouge">f</code> as part of a PyTorch model I was training, so I would need to either rewrite the entire model and training code to use JAX (a massive task considering my codebase size) or keep two versions of <code class="language-plaintext highlighter-rouge">f</code> around – one using PyTorch, one using JAX. This seemed like a recipe for disaster, considering that I was tweaking <code class="language-plaintext highlighter-rouge">f</code> pretty frequently.</p> <p>So here’s the idea – why not JAXify a PyTorch function? Something like this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">import</span> <span class="n">jax</span>
<span class="kn">import</span> <span class="n">jax.numpy</span> <span class="k">as</span> <span class="n">jnp</span>
<span class="kn">from</span> <span class="n">jorch</span> <span class="kn">import</span> <span class="n">to_jax</span>

<span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Silly example torch function </span><span class="sh">"""</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>
    <span class="nf">return </span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">).</span><span class="nf">sum</span><span class="p">()</span>

<span class="c1"># Use with standard torch tensors
</span><span class="n">x_torch</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">torch f:</span><span class="sh">"</span><span class="p">,</span> <span class="nf">f</span><span class="p">(</span><span class="n">x_torch</span><span class="p">))</span>

<span class="c1"># AND with JAX arrays. Whaaaa....
</span><span class="n">f_jax</span> <span class="o">=</span> <span class="nf">to_jax</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
<span class="n">x_jax</span> <span class="o">=</span> <span class="n">jnp</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">jax f:</span><span class="sh">"</span><span class="p">,</span> <span class="nf">f_jax</span><span class="p">(</span><span class="n">x_jax</span><span class="p">))</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>torch f: tensor(100.)
jax f: 100.0
</code></pre></div></div> <p>Turns out this is totally possible! It’s a fun little exercise to figure out how to do this. But it’s also a horrible idea to use this in anything important, as I hope this post conveys.</p> <p>So how does <code class="language-plaintext highlighter-rouge">jorch</code> work?</p> <p>It turns out that PyTorch has some incredible <a href="https://pytorch.org/docs/stable/notes/extending.html">extensibility</a> features. Namely, if you call a torch function (say, <code class="language-plaintext highlighter-rouge">torch.sin</code>) with a new class it will check to see if that class defines a <code class="language-plaintext highlighter-rouge">__torch_function__</code> method. If so, it will delegate responsibility for computing the function to the <code class="language-plaintext highlighter-rouge">__torch_function__</code> method. It’s a fancy way of implementing <a href="https://en.wikipedia.org/wiki/Multiple_dispatch">multiple dispatch</a> in a language that doesn’t natively support it.</p> <p>Here’s a minimal version of what we want to do:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
<span class="kn">from</span> <span class="n">torch.utils._pytree</span> <span class="kn">import</span> <span class="n">tree_map</span>

<span class="k">def</span> <span class="nf">jorch_unwrap</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">JorchTensor</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">x</span><span class="p">.</span><span class="n">arr</span>
    <span class="k">return</span> <span class="n">x</span>

<span class="k">def</span> <span class="nf">jorch_wrap</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">jnp</span><span class="p">.</span><span class="n">ndarray</span><span class="p">):</span>
        <span class="k">return</span> <span class="nc">JorchTensor</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">x</span>

<span class="k">class</span> <span class="nc">JorchTensor</span><span class="p">():</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">arr</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">arr</span> <span class="o">=</span> <span class="n">arr</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">__torch_function__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">func</span><span class="p">,</span> <span class="n">types</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(),</span> <span class="n">kwargs</span><span class="o">=</span><span class="p">{}):</span>
        <span class="n">args</span> <span class="o">=</span> <span class="nf">tree_map</span><span class="p">(</span><span class="n">jorch_unwrap</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span>
        <span class="n">kwargs</span> <span class="o">=</span> <span class="nf">tree_map</span><span class="p">(</span><span class="n">jorch_unwrap</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">)</span>
        <span class="n">new_func</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">jnp</span><span class="p">,</span> <span class="n">func</span><span class="p">.</span><span class="n">__name__</span><span class="p">)</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">new_func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">tree_map</span><span class="p">(</span><span class="n">jorch_wrap</span><span class="p">,</span> <span class="n">out</span><span class="p">)</span>
    
<span class="k">def</span> <span class="nf">to_jax</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
    <span class="nd">@wraps</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">args</span> <span class="o">=</span> <span class="nf">tree_map</span><span class="p">(</span><span class="n">jorch_wrap</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span>
        <span class="n">kwargs</span> <span class="o">=</span> <span class="nf">tree_map</span><span class="p">(</span><span class="n">jorch_wrap</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">)</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">f</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">tree_map</span><span class="p">(</span><span class="n">jorch_unwrap</span><span class="p">,</span> <span class="n">out</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">wrapper</span>
</code></pre></div></div> <p>The basic idea is to create a wrapper class <code class="language-plaintext highlighter-rouge">JorchTensor</code> that pretends to be a PyTorch tensor but is secretly holding a JAX array (and is using only JAX primitives).</p> <p>We first define the functions <code class="language-plaintext highlighter-rouge">jorch_unwrap</code> and <code class="language-plaintext highlighter-rouge">jorch_wrap</code> to convert between <code class="language-plaintext highlighter-rouge">JorchTensors</code> and regular JAX arrays. When the <code class="language-plaintext highlighter-rouge">__torch_function__</code> method is called, we use <code class="language-plaintext highlighter-rouge">tree_map</code> to recursively call <code class="language-plaintext highlighter-rouge">jorch_unwrap</code> on all the arguments to convert them to JAX arrays. Then we determine the JAX version of the PyTorch function in question with <code class="language-plaintext highlighter-rouge">getattr(jnp, func.__name__)</code>. This converts e.g. <code class="language-plaintext highlighter-rouge">torch.sin</code> to <code class="language-plaintext highlighter-rouge">jnp.sin</code>. We use that function on the arguments, wrap the result in a <code class="language-plaintext highlighter-rouge">JorchTensor</code>, and viola!</p> <p>And now the <code class="language-plaintext highlighter-rouge">to_jax</code> function is pretty simple – just wrap the arguments in <code class="language-plaintext highlighter-rouge">JorchTensors</code>, run the PyTorch function, and return the unwrapped result.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">jnp</span><span class="p">.</span><span class="nf">ones</span><span class="p">((</span><span class="mi">1</span><span class="p">,))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">to_jax</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">sin</span><span class="p">)(</span><span class="n">x</span><span class="p">))</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[0.84147096]
</code></pre></div></div> <p>Now there are still a lot of things to add to the <code class="language-plaintext highlighter-rouge">JorchTensor</code> class – especially operators. All the arithmetic operators are pretty simple. The only spicy one is <code class="language-plaintext highlighter-rouge">__getattribute__</code>, but the idea is pretty much the same as the <code class="language-plaintext highlighter-rouge">__torch_function__</code> method – unwrap the arguments, find the relevant JAX method, call the method, and wrap the result. I’m not going to get into the details because I want to point out a big, glaring flaw in my strategy. Do you see it?</p> <p>That’s right! We can’t just naively assume that the <code class="language-plaintext highlighter-rouge">jnp</code> and <code class="language-plaintext highlighter-rouge">torch</code> APIs are the same. Sure, this will mostly work for basic functions like <code class="language-plaintext highlighter-rouge">torch.sin</code> and <code class="language-plaintext highlighter-rouge">torch.exp</code>, but what about <code class="language-plaintext highlighter-rouge">torch.linalg.norm</code>? JAX has an equivalent function <code class="language-plaintext highlighter-rouge">jax.norm</code>, but you’ll need to manually override that in the JAX conversion process.</p> <p>It gets even worse – even for basic functions like <code class="language-plaintext highlighter-rouge">sum</code>, JAX and PyTorch have slightly different arguments. Whereas JAX would use <code class="language-plaintext highlighter-rouge">jnp.sum(x, axis=0, keepdims=True)</code>, PyTorch prefers <code class="language-plaintext highlighter-rouge">torch.sum(x, dim=0, keepdim=True)</code>. In the final version of <code class="language-plaintext highlighter-rouge">jorch</code> code, I wrote these truly cursed conditions:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">if</span> <span class="sh">"</span><span class="s">dim</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">kwargs</span><span class="p">:</span>
        <span class="n">kwargs</span><span class="p">[</span><span class="sh">"</span><span class="s">axis</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">kwargs</span><span class="p">[</span><span class="sh">"</span><span class="s">dim</span><span class="sh">"</span><span class="p">]</span>
        <span class="k">del</span> <span class="n">kwargs</span><span class="p">[</span><span class="sh">"</span><span class="s">dim</span><span class="sh">"</span><span class="p">]</span>
    <span class="k">if</span> <span class="sh">"</span><span class="s">keepdim</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">kwargs</span><span class="p">:</span>
        <span class="n">kwargs</span><span class="p">[</span><span class="sh">"</span><span class="s">keepdims</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">kwargs</span><span class="p">[</span><span class="sh">"</span><span class="s">keepdim</span><span class="sh">"</span><span class="p">]</span>
        <span class="k">del</span> <span class="n">kwargs</span><span class="p">[</span><span class="sh">"</span><span class="s">keepdim</span><span class="sh">"</span><span class="p">]</span>
</code></pre></div></div> <p>In the end, I did manage to create a system that successfully JAXified my PyTorch function in question – and it is quite fast after compilation. However, the final code for doing all this ended up becoming an unmaintainable mess. I’m currently in the process of getting <code class="language-plaintext highlighter-rouge">torch.compile</code> to work instead.</p> <p>There’s an important lesson here: it’s cool to write wack code to do wack things. But don’t depend on it for anything important!</p> <p>The full <code class="language-plaintext highlighter-rouge">jorch</code> code I used in my project is <a href="https://gist.github.com/mixarcid/06fc40efe91051a92b7b5284db1bcb01">here</a> if you’re interested in playing around with it.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Speeding up PyTorch with a cursed wrapper library]]></summary></entry></feed>